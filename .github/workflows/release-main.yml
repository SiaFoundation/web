name: Release Versions or Publish NPM

on:
  push:
    branches:
      - main

# This is for .npmrc. Nx automatically creates an .npmrc before changesets runs
# and creates one itself, so we need to explicitly have one.
env:
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

concurrency: commits-to-main

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout all commits
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup
        uses: ./.github/actions/setup-all
        with:
          node_version: 20.10.0
          go_version: 1.21.7
      # The SDK is referenced via dist in the tsconfig.base.json
      # because the next executor does not actually support
      # buildLibsFromSource=false
      # With this configuration NX does not build the SDK as expected
      # when it is an app dependency
      - name: Force build SDK
        shell: bash
        run: npx nx run sdk:build
      - name: Build for publishing
        shell: bash
        run: npx nx run-many --target=build --configuration=production --all --parallel=5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
      # If there are changesets, then we are in PR prep mode and will
      # update the release pull request. Note that if there are no changesets
      # this step will be skipped because no publish script is specified.
      - name: Update release pull request
        id: changesets
        uses: changesets/action@v1
        with:
          commit: 'chore: release packages'
          version: npm run version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Replace src code with dists for publishing
        if: steps.changesets.outputs.hasChangesets == 'false'
        run: ./scripts/replace-src-with-dists-for-publishing.sh
      # If no changesets were detected in the PR prep step then we are in
      # release/publish mode. Check for and publish any new versions to NPM.
      - name: Publish to NPM and create GitHub releases
        id: changesets_release
        if: steps.changesets.outputs.hasChangesets == 'false'
        uses: changesets/action@v1
        with:
          publish: npm run release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Release Go modules
        # if a release was published, release the Go modules
        if: steps.changesets_release.outputs.published == 'true'
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.PAT_REPOSITORY_DISPATCH }}
          repository: siafoundation/web
          event-type: release-go
  release-docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout all commits
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup
        uses: ./.github/actions/setup-all
        with:
          node_version: 20.10.0
          go_version: 1.21.7
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # The SDK is referenced via dist in the tsconfig.base.json
      # because the next executor does not actually support
      # buildLibsFromSource=false
      # With this configuration NX does not build the SDK as expected
      # when it is an app dependency
      - name: Force build SDK
        shell: bash
        run: npx nx run sdk:build
      - name: Containers
        shell: bash
        run: npx nx run-many --target=container --configuration=production -all --parallel=5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
      - name: Containers zen
        shell: bash
        run: npx nx run-many --target=container --configuration=production-testnet-zen -all --parallel=5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
  # This job should always pass because the workflow is running run against code that
  # was already linted and tested in PR.
  # This runs in parallel to the build and release process as an extra check but does
  # not actually block the release if job fails.
  test-js:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout all commits
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup
        uses: ./.github/actions/setup-all
        with:
          node_version: 20.10.0
          go_version: 1.21.7
      - name: Lint TypeScript
        shell: bash
        run: npx nx run-many --target=lint --all --parallel=5
      # The SDK is referenced via dist in the tsconfig.base.json
      # because the next executor does not actually support
      # buildLibsFromSource=false
      # With this configuration NX does not build the SDK as expected
      # when it is an app dependency
      - name: Force build SDK
        shell: bash
        run: npx nx run sdk:build
      - name: Test TypeScript
        shell: bash
        run: npx nx run-many --target=test --all --parallel=5
      - name: Install playwright deps for e2e
        shell: bash
        run: npx playwright install-deps
      - name: Test e2e
        shell: bash
        run: npx nx run-many --target=e2e --all --parallel=5
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
  # This job should always pass because the workflow is running run against code that
  # was already linted and tested in PR.
  # This runs in parallel to the build and release process as an extra check but does
  # not actually block the release if job fails.
  test-go:
    # Run matrix since Go modules are used across all platforms
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        module: [./renterd, ./hostd, ./walletd]
    steps:
      - name: Checkout all commits
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Git
        uses: ./.github/actions/setup-git
      # Only Go setup is necessary for running Go tests
      - name: Setup Go
        uses: ./.github/actions/setup-go
        with:
          go_version: 1.21.7
      - name: Lint Go
        uses: golangci/golangci-lint-action@v4
        with:
          working-directory: ${{ matrix.module }}
          skip-cache: true
      - name: Test Go
        uses: n8maninger/action-golang-test@v2
        with:
          args: '-race'
          package: ${{ matrix.module }}/...
