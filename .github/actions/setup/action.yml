name: Setup

description: Setup

inputs:
  node_version:
    description: Node.js version
    required: false
    default: '20.10.0'

runs:
  using: composite
  steps:
    - name: git user config
      shell: bash
      run: |
        git config user.name "${GITHUB_ACTOR}"
        git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
    - name: Derive appropriate SHAs for base and head for `nx affected` commands
      uses: nrwl/nx-set-shas@v3
    - uses: actions/setup-node@v3
      with:
        node-version: ${{ inputs.node_version }}
        registry-url: https://registry.npmjs.org
    - uses: actions/setup-go@v4
      with:
        go-version: 'stable'
    - name: Set up node cache
      uses: actions/cache@v3
      with:
        # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
        path: |
          ~/.npm
          ~/node_modules
          ${{ github.workspace }}/apps/*/dist/.next/cache
        # Generate a new cache whenever packages or source files change.
        key: ${{ runner.os }}-${{ inputs.node_version }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
        # If source files changed but packages didn't, rebuild from a prior cache.
        restore-keys: |
          ${{ runner.os }}-${{ inputs.node_version }}-${{ hashFiles('**/package-lock.json') }}-
    - name: Install
      # could do this since its a ci, but it force rebuilds node_modules
      # run: npm ci
      run: npm install
      shell: bash
